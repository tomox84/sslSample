#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sslsample:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

// -- pemファイルの読み込み
var ssl
const dir = '/etc/letsencrypt/for-nodejs/'
var fs = require('fs')
try {
    ssl = {
      key: fs.readFileSync(dir + 'privkey.pem'),
      cert: [fs.readFileSync(dir + 'cert.pem')],
      // 中間CAの設定をしない時はした行をコメントアウト
      ca:   [fs.readFileSync(dir + 'chain.pem'), fs.readFileSync(dir + 'fullchain.pem')]
    }
    console.error("pemを読み込みました")
} catch (error) {
    console.error("pemが読み込みできませんでした")
}

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

// -- serverの生成（sslのファイルがあるときはhttps、そうでないときはhttp）
var server
if(ssl) {
    server = require('https').createServer(ssl,app) // for use express
    console.log('https(SSL)で起動します')
    // 以下SSLの証明書を無視する為
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"   
    global.serverProtocol = "https"    
}
else {
    server = require('http').createServer(app)    // for use express
    console.log('httpで起動します')
    global.serverProtocol = "http"
}

/**
 * Listen on provided port, on all network interfaces.
 */

global.serverPort = port
server.listen(port,function(){
  console.log('---------------------------------------')
  console.log('  Started Server...')
  console.log('  ' + global.serverProtocol + '://localhost: ' + port)
  console.log('---------------------------------------')
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
